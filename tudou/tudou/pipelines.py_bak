# -*- coding: utf-8 -*-

# Define your item pipelines here
#
# Don't forget to add your pipeline to the ITEM_PIPELINES setting
# See: http://doc.scrapy.org/en/latest/topics/item-pipeline.html

import codecs, json
import MySQLdb
from datetime import datetime
from hashlib import md5
from twisted.enterprise import adbapi
import logging
import MySQLdb.cursors


#
# class TudouPipeline(object):
#     def process_item(self, item, spider):
#         return str(item).decode("unicode-escape")


# 写入文件
class JsonWithEncodingCnblogsPipeline(object):
    def __init__(self):
        self.file = codecs.open('tudou.json', 'w', encoding='utf-8')

    def process_item(self, item, spider):
        line = json.dumps(dict(item), ensure_ascii=False) + "\n"
        self.file.write(line)
        return item

    def spider_closed(self, spider):
        self.file.close()


# 写入到数据库
class MySQLStoreCnblogsPipeline(object):
    def __init__(self, dbpool):
        self.dbpool = dbpool

    @classmethod
    def from_settings(cls, settings):
        dbargs = dict(
            host=settings['MYSQL_HOST'],
            db=settings['MYSQL_DBNAME'],
            user=settings['MYSQL_USER'],
            passwd=settings['MYSQL_PASSWD'],
            charset='utf8',
            cursorclass=MySQLdb.cursors.DictCursor,
            use_unicode=True,
        )
        dbpool = adbapi.ConnectionPool('MySQLdb', **dbargs)

        return cls(dbpool)

    # 将每行更新或写入数据库中
    # 获取url的md5编码
    def _get_linkmd5id(self, item):
        # url进行md5处理，为避免重复采集设计
        return md5(item['playUrl']).hexdigest()

    def _do_upinsert(self, conn, item, spider):
        linkmd5id = self._get_linkmd5id(item)
        now = datetime.utcnow().replace(microsecond=0).isoformat(' ')
        conn.execute("""
                   select 1 from tudou_info where linkmd5id = %s
           """, (linkmd5id,))
        ret = conn.fetchone()

        if ret:

            conn.execute("""
                   update tudou_info set albumId ='%s', title =' %s', actors = '%s', itemTile = '%s', peputation = '%s'
                   ,playUrl= '%s', playtimes= '%s', updateInfo= '%s', updated= '%s'
                   where linkmd5id = '%s'
               """, (item['albumId'], item['title'], item['actors'], item['itemTile'], item['reputation'],
                     item['playUrl'], item['playtimes'], item['updateInfo'],
                     now, linkmd5id))
        else:
            conn.execute("""
                   insert into tudou_info(linkmd5id,albumId, title,actors , itemTile,peputation,playUrl,playtimes,
                   updateInfo,updated)
                   values(%s, %s, %s, %s, %s, %s,%s, %s, %s, %s)
               """, (linkmd5id, item['albumId'], item['title'], item['actors'], item['itemTile'], item['reputation'],
                     item['playUrl'],
                     item['playtimes'], item['updateInfo'], now))
            print "insert success"

    # pipeline默认调用
    def process_item(self, item, spider):

        d = self.dbpool.runInteraction(self._do_upinsert, item, spider)
        d.addErrback(self._handle_error, item, spider)
        d.addBoth(lambda _: item)
        return d

    # 异常处理
    def _handle_error(self, failure, item, spider):
        logging.log.err(failure)
